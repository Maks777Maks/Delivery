// <auto-generated />
using System;
using Delivery.DAL.EFContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Delivery.Migrations
{
    [DbContext(typeof(EFDbContext))]
    partial class EFDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Delivery.DAL.EFContext.AdminProfile", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("Id");

                    b.ToTable("tblAdminProfile");
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.DbRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.DbUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.DbUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.UserAccess", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime>("DateBlock");

                    b.Property<bool>("IsUnblock");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("tblUsersAccesses");
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.UserProfile", b =>
                {
                    b.Property<string>("Id");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<DateTime>("RegistrationDate");

                    b.HasKey("Id");

                    b.ToTable("tblUserProfile");
                });

            modelBuilder.Entity("Delivery.DAL.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsAvailable");

                    b.Property<bool>("IsVegetarian");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<decimal>("Price");

                    b.Property<int>("TypeOfCuisineId");

                    b.Property<int>("TypeOfDishId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfCuisineId");

                    b.HasIndex("TypeOfDishId");

                    b.ToTable("tblDishes");
                });

            modelBuilder.Entity("Delivery.DAL.Models.DishInOrder", b =>
                {
                    b.Property<int>("DishesInOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("DishId");

                    b.Property<int>("OrderId");

                    b.HasKey("DishesInOrderId");

                    b.HasIndex("DishId");

                    b.HasIndex("OrderId");

                    b.ToTable("tblDishesInOrder");
                });

            modelBuilder.Entity("Delivery.DAL.Models.Extra", b =>
                {
                    b.Property<int>("ExtraId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("Image")
                        .HasMaxLength(150);

                    b.Property<string>("Measuring")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ExtraId");

                    b.ToTable("tblExtras");
                });

            modelBuilder.Entity("Delivery.DAL.Models.ExtraInOrder", b =>
                {
                    b.Property<int>("ExtraInOrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("ExtraId");

                    b.Property<int>("OrderId");

                    b.HasKey("ExtraInOrderId");

                    b.HasIndex("ExtraId");

                    b.HasIndex("OrderId");

                    b.ToTable("tblExtrasInOrder");
                });

            modelBuilder.Entity("Delivery.DAL.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("CustomerWishes")
                        .HasMaxLength(500);

                    b.Property<DateTime>("DateCancel");

                    b.Property<DateTime>("DateOfCreate");

                    b.Property<DateTime>("DateOfDelivery");

                    b.Property<DateTime>("DateReceived");

                    b.Property<string>("DbUserId");

                    b.Property<string>("OrderInvoice")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OrderStatusId");

                    b.Property<int?>("OrderStatusStatusId");

                    b.Property<decimal>("TotalPrice");

                    b.Property<string>("UserId");

                    b.HasKey("OrderId");

                    b.HasIndex("DbUserId");

                    b.HasIndex("OrderStatusStatusId");

                    b.ToTable("tblOrders");
                });

            modelBuilder.Entity("Delivery.DAL.Models.OrderStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("StatusId");

                    b.ToTable("tblOrdersStatuses");
                });

            modelBuilder.Entity("Delivery.DAL.Models.TypeOfCuisine", b =>
                {
                    b.Property<int>("TypeOfCuisineId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("TypeOfCuisineName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("TypeOfCuisineId");

                    b.ToTable("tblTypesOfCuisines");
                });

            modelBuilder.Entity("Delivery.DAL.Models.TypeOfDish", b =>
                {
                    b.Property<int>("TypeOfDishId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasMaxLength(200);

                    b.Property<string>("TypeOfDishName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("TypeOfDishId");

                    b.ToTable("tblTypesOfDishes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.AdminProfile", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.DbUserRole", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Delivery.DAL.EFContext.DbUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.UserAccess", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbUser", "BlockedUser")
                        .WithOne("UserAccess")
                        .HasForeignKey("Delivery.DAL.EFContext.UserAccess", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Delivery.DAL.EFContext.UserProfile", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbUser", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Delivery.DAL.EFContext.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Delivery.DAL.Models.Dish", b =>
                {
                    b.HasOne("Delivery.DAL.Models.TypeOfCuisine", "TypeOfCuisine")
                        .WithMany()
                        .HasForeignKey("TypeOfCuisineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Delivery.DAL.Models.TypeOfDish", "TypeOfDish")
                        .WithMany()
                        .HasForeignKey("TypeOfDishId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Delivery.DAL.Models.DishInOrder", b =>
                {
                    b.HasOne("Delivery.DAL.Models.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("DishId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Delivery.DAL.Models.Order", "Order")
                        .WithMany("Dishes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Delivery.DAL.Models.ExtraInOrder", b =>
                {
                    b.HasOne("Delivery.DAL.Models.Extra", "Extra")
                        .WithMany()
                        .HasForeignKey("ExtraId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Delivery.DAL.Models.Order", "Order")
                        .WithMany("Extras")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Delivery.DAL.Models.Order", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbUser", "DbUser")
                        .WithMany()
                        .HasForeignKey("DbUserId");

                    b.HasOne("Delivery.DAL.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusStatusId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Delivery.DAL.EFContext.DbUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
